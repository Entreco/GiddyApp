apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "nl.entreco.giddyapp"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode generateVersionCode()
        versionName = generateVersionName()
        archivesBaseName = "${appName}-${versionName}"
        resValue "string", "version", "\"${appName}-${versionName}\""

        resConfigs "en", "nl"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // Resource shrinker cannot be used for multi-apk applications
            shrinkResources false

            // There's a Dex Splitter issue when enabling DataBinding & proguard in dynamic features
            // The temporary workaround is to: -keep class nl.entreco.giddyapp.creator.DataBinderMapperImpl { *; }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../proguard-rules.pro'
        }
    }

    flavorDimensions "channel"
    productFlavors {
        beta {
            applicationIdSuffix ".dev"
            dimension "channel"
            matchingFallbacks = ['debug']
        }

        prod {
            dimension "channel"
            matchingFallbacks = ['debug']
        }
    }

    //Add the following configuration in order to target Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    dynamicFeatures = [
            ":features:creator",
            ":features:viewer",
            ":features:profile",
            ":features:signup"
    ]
}

dependencies {
    implementation project(':libraries:libAuth')
    implementation project(':libraries:libCore')
    implementation project(':libraries:libMatches')
    api project(':libraries:libHorses')// Alas, this is suggested work-around to make libraries available in multiple features
    api project(':libraries:libImg')// Alas, this is suggested work-around to make libraries available in multiple features

    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"

    // LeakCanary
//    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"

    testImplementation "junit:junit:$junit"

    androidTestImplementation "androidx.test:core:$xTestCore"
    androidTestImplementation "androidx.test:runner:$xTestRunner"
    androidTestImplementation "androidx.test:rules:$xTestRules"
    androidTestImplementation "androidx.test.ext:junit:$xTestExtJunit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$xEspressoCore"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito-inline-extended:$dexmaker"
}

apply plugin: 'com.google.gms.google-services'
